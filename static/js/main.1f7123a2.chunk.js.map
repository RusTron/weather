{"version":3,"sources":["variables/index.js","store/reducers/placesReducer.js","store/reducers/weatherReducer.js","store/reducers/loadingReducer.js","store/index.js","components/Header/Header.jsx","components/PlacesInput/PlacesInput.jsx","axios/index.js","components/TemperatureChart/TemperatureChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["SET_NEW_COORDINATES","SET_NEW_ADDRESS","SELECTED_ADDRESS","SET_TEMPERATURE","LOADED_DATA","placesActions","address","initialState","lat","lng","selectedAddress","weatherActions","newTemperature","data","loadingActions","value","loaded","rootReducer","combineReducers","places","state","action","console","log","type","payload","weather","loading","store","createStore","Header","className","href","target","rel","PlacesInput","dispatch","useDispatch","selectedPlace","useSelector","changeAddress","newValue","document","querySelector","getTemperatureFromServer","latLng","axios","get","getData","then","res","list","map","item","date","dt_txt","temp","main","toFixed","changeLoading","handleSelect","a","geocodeByAddress","results","getLatLng","onChange","onSelect","searchOptions","types","highlightFirstSuggestion","getInputProps","suggestions","getSuggestionItemProps","placeholder","length","suggestion","description","TemperatureChart","time","split","slice","temperature","width","height","strokeDasharray","dataKey","interval","angle","dx","stroke","activeDot","r","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1f7123a2.chunk.js","sourcesContent":["export const SET_NEW_COORDINATES = 'SET_NEW_COORDINATES';\nexport const SET_NEW_ADDRESS = 'SET_NEW_ADDRESS';\nexport const SELECTED_ADDRESS = 'SELECTED_ADDRESS';\nexport const SET_TEMPERATURE = 'SET_TEMPERATURE';\nexport const LOADED_DATA = 'LOADED_DATA';","import {\n  SET_NEW_COORDINATES,\n  SET_NEW_ADDRESS,\n  SELECTED_ADDRESS\n} from '../../variables';\n\nexport const placesActions = {\n  setCoordinates: (newCoordinates) => ({\n    'type': SET_NEW_COORDINATES,\n    'payload': newCoordinates\n  }),\n  setAddress: (address) => ({\n    'type': SET_NEW_ADDRESS,\n    'payload': address,\n  }),\n  setSelectedAddress: (address) => ({\n    'type': SELECTED_ADDRESS,\n    'payload': address\n  }),\n}\n\nconst initialState = {\n  lat: null,\n  lng: null,\n  address: '',\n  selectedAddress: '',\n}\n\nexport default(state = initialState, action) => {\n  console.log(state);\n  switch(action.type){\n    case SET_NEW_COORDINATES:\n      return {...state, lat: action.payload.lat, lng: action.payload.lng};\n    case SET_NEW_ADDRESS:\n      return {...state, address: action.payload};\n    case SELECTED_ADDRESS:\n      return {...state, selectedAddress: action.payload};\n    default: \n    return state;\n  }\n}\n","import { SET_TEMPERATURE } from '../../variables';\n\nexport const weatherActions = {\n  setTemperature: (newTemperature) => ({\n    'type': SET_TEMPERATURE,\n    'payload': newTemperature\n  })\n}\n\nconst initialState = {\n  data: null,\n}\n\nexport default(state = initialState, action) => {\n  console.log(action);\n  switch(action.type){\n    case SET_TEMPERATURE:\n      return {...state, data: action.payload};\n    default: \n    return state;\n  }\n}\n","import { LOADED_DATA } from '../../variables';\n\nexport const loadingActions = {\n  setLoading: (value) => ({\n    'type': LOADED_DATA,\n    'payload': value,\n  })\n}\n\nconst initialState = {\n  loaded: false,\n}\n\n\nexport default(state = initialState, action) => {\n  console.log(action);\n  switch(action.type){\n    case LOADED_DATA:\n      return {...state, loaded: action.payload};\n    default:\n    return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport placesReducer from './reducers/placesReducer';\nimport weatherReducer from './reducers/weatherReducer';\nimport loadingReducer from './reducers/loadingReducer';\n\nconst rootReducer = combineReducers({\n  places: placesReducer,\n  weather: weatherReducer,\n  loading: loadingReducer,\n})\n\nconst store = createStore(\n  rootReducer\n);\n\nexport default store;\n","import React from 'react';\nimport './Header.scss';\n\nexport const Header = () => {\n\n  return (\n    <header className=\"App-header\">\n      <a\n        className=\"App-link\"\n        href=\"https://reactjs.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn React\n      </a>\n    </header>\n  )\n}\n","import React from 'react';\nimport { placesActions } from '../../store/reducers/placesReducer';\nimport { weatherActions } from '../../store/reducers/weatherReducer';\nimport { loadingActions } from '../../store/reducers/loadingReducer';\nimport PlaceAutocomplete, {\n  geocodeByAddress,\n  getLatLng\n} from \"react-places-autocomplete\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport './PlacesInput.scss';\nimport { getData } from '../../axios';\nimport { SELECTED_ADDRESS } from '../../variables';\n\nexport const PlacesInput = () => {\n  const dispatch = useDispatch();\n  const selectedPlace = useSelector(({ places })=> places);\n  const loaded = useSelector(({loading})=> loading.loaded);\n\n  const changeAddress = (newValue) => {\n    const action = placesActions.setAddress(newValue)\n    dispatch(action);\n    debugger;\n    const a = document.querySelector('.mt-2');\n  }\n\n  const selectedAddress = (address) => {\n    const action = placesActions.setSelectedAddress(address);\n    dispatch(action);\n  }\n\n  const getTemperatureFromServer = (latLng) => {\n    getData(latLng).then(res=> {\n      const action = weatherActions.setTemperature(res.data.list\n        .map(item=> ({date: item.dt_txt, temp: +(item.main.temp - 273.15).toFixed(2)})));\n      dispatch(action);\n    });\n  }\n\n  const changeLoading = (value) => {\n    const action = loadingActions.setLoading(value)\n    dispatch(action);\n  }\n\n  const searchOptions = {\n    types: [\"(cities)\"],\n  };\n\n  const handleSelect = async value => {\n    try {\n      const results = await geocodeByAddress(value);\n      const latLng = await getLatLng(results[0]);\n      changeAddress(value);\n      selectedAddress(value);\n      getTemperatureFromServer(latLng);\n      changeLoading(true);\n    }\n    catch(e){\n      console.log(e);\n    }\n  };\n\n  return (\n    <div>\n       <PlaceAutocomplete\n        value={selectedPlace.address}\n        onChange={changeAddress}\n        onSelect={handleSelect}\n        searchOptions={searchOptions}\n        highlightFirstSuggestion\n      >\n        {({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: \"Type address\",\n                className: \"form-control\",\n                \"aria-haspopup\": true\n              })}\n            />\n            <div className=\"mt-2 position-relative\">\n              {loading ? (\n                <div className=\"dropdown-menu\">...loading</div>\n              ) : (\n                suggestions &&\n                suggestions.length > 0 && (\n                  <div className=\"dropdown-menu show\">\n                    {suggestions.map(suggestion => {\n                      return (\n                        <div\n                          {...getSuggestionItemProps(suggestion, {\n                            className: \"dropdown-item\"\n                          })}\n                        >\n                          {suggestion.description}\n                        </div>\n                      );\n                    })}\n                  </div>\n                )\n              )}\n            </div>\n          </div>\n        )}\n      </PlaceAutocomplete>\n      {loaded && (\n        <h2 className=\"title\">\n          Прогноз погоды в {selectedPlace.selectedAddress} на ближайшие 5 суток\n        </h2>\n      )}\n    </div>\n  )\n}\n","import axios from 'axios';\n\nconst API_KEY = 'bad46dfee1ae1125ec4faf31e63449de';\n\nexport const getData = ({lat, lng}) => {\n  return axios.get(`http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&appid=${API_KEY}`);\n}\n","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Legend,\n} from 'recharts';\nimport './TemperatureChart.scss';\n\nexport const TemperatureChart = () => {\n  const temp = useSelector(({weather})=> {\n    if(weather.data){\n      return weather.data.map(item=> ({\n        time: item.date.split(/ /g)[1].slice(0, 5),\n        temperature: item.temp,\n      }));\n    }\n  return null;\n  })\n\n  return (\n    <div className=\"weather\">\n      {temp !== null && (\n        <LineChart\n          width={1200}\n          height={300}\n          data={temp}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"time\" interval={1} angle={0} dx={10} />\n          <YAxis type=\"number\"/>\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      )}\n    </div>\n  )\n}\n","import React from 'react';\nimport { Header } from './components/Header';\nimport './App.css';\nimport { PlacesInput } from './components/PlacesInput';\nimport { TemperatureChart } from './components/TemperatureChart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <PlacesInput />\n      <TemperatureChart />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}